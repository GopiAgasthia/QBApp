name: CI CD Pipeline

#on:
#  push:
#    branches: [ "main" ]
#
#jobs:
#
#  checkout-code:
#    runs-on: ubuntu-latest
#    steps:
#      - uses: actions/checkout@v4
#
#  integration-unit-test:
#    needs: [ checkout-code ]
#    runs-on: ubuntu-latest
#
#    # if: needs.paths-filter.outputs.output1 == 'true'
#    services:
#      elasticsearch:
#        image: docker.elastic.co/elasticsearch/elasticsearch:8.8.1
#        env:
#          discovery.type: single-node
#          xpack.security.enabled: false
#        options: >-
#          --health-cmd "curl -f http://localhost:9200"
#          --health-interval 20s
#          --health-timeout 5s
#          --health-retries 5
#        ports:
#          - "9200:9200"
#          - "9300:9300"
#    steps:
#      - uses: actions/checkout@v4
#      - name: Set up JDK 21
#        uses: actions/setup-java@v4
#        with:
#          java-version: '21'
#          distribution: 'temurin'
##      - name: Run unit tests
##        run: mvn test --file ./MyApp/pom.xml
#
#
#  build:
#
#    runs-on: ubuntu-latest
#    needs: integration-unit-test
#
#    steps:
#      - name: Checkout code
#        uses: actions/checkout@v2
#
#      - name: Setting up Java and Maven
#        uses: actions/setup-java@v4
#        with:
#          java-version: '21'
#          distribution: 'temurin'
#          cache: 'maven'
#
#      - name: Set up Node.js
#        uses: actions/setup-node@v4
#        with:
#          node-version: 'v20.11.0'
#
#      - name: Login to Docker Hub
#        uses: docker/login-action@v3
#        with:
#          registry: docker.io
#          username: ${{ secrets.DOCKER_USERNAME }}
#          password: ${{ secrets.DOCKER_PASSWORD }}
#
#      - name: Set up Docker Compose
#        run: docker-compose -f docker-compose.yml up -d -y
#
#      - name: Build and push backend image
#        working-directory: ./questionBank-Backend/questionBank
#        run: |
#          mvn --batch-mode --update-snapshots verify
#          docker build -t gopiagasthia/qbank-backend:latest .
#          docker push gopiagasthia/qbank-backend:latest
#
#      - name: Build and push frontend image
#        working-directory: ./questionBank-Frontend/web
#        run: |
#          docker build -t gopiagasthia/qbank-frontend:latest .
#          docker push gopiagasthia/qbank-frontend:latest
#
#      - name: Show Docker images
#        run: docker images
#
#      - name: Tear down Docker Compose
#        run: docker-compose -f docker-compose.yml down
#  deploy:
#   runs-on: self-hosted
#   needs: build
#   steps:
#      - uses: actions/checkout@v4
#
#      - name: Login to Docker Hub
#        uses: docker/login-action@v3
#        with:
#          registry: docker.io
#          username: ${{ secrets.DOCKER_USERNAME }}
#          password: ${{ secrets.DOCKER_PASSWORD }}
#
#           # Pull the newly created backend image
#      - name: Pull backend image
#        run: docker pull gopiagasthia/qbank-backend:latest
#
#      # Pull the newly created frontend image
#      - name: Pull frontend image
#        run: docker pull gopiagasthia/qbank-frontend:latest
#
#      - name: Set up Docker Compose again
#        run: docker-compose -f docker-compose.yml up -d
#
on:
  push:
    branches: [ main ]
#  pull_request:
#    branches: [ main ]
jobs:
  checkout-code:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
  integration-unit-test:
    needs: [checkout-code]
    runs-on: ubuntu-latest

    # if: needs.paths-filter.outputs.output1 == 'true'
    services:
      elasticsearch:
        image: docker.elastic.co/elasticsearch/elasticsearch:8.8.1
        env:
          discovery.type: single-node
          xpack.security.enabled: false
        options: >-
          --health-cmd "curl -f http://localhost:9200"
          --health-interval 20s
          --health-timeout 5s
          --health-retries 5
        ports:
          - "9200:9200"
          - "9300:9300"
    steps:
      - uses: actions/checkout@v4
      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'
#      - name: Run unit tests
#        run: mvn test --file ./MyApp/pom.xml
  build_backend:
    runs-on: ubuntu-latest
    needs: [integration-unit-test]
    steps:
      - uses: actions/checkout@v4
      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'
      - name: Build with Maven
        run: |
#           mvn -B package --file ./questionBank-backend/questionBank/pom.xml -DskipTests
           cd questionBank-backend/questionBank
           mvn --batch-mode --update-snapshots verify
      - name: build spring boot image
        run: docker build -t spring-app .
      - name: display spring-app image
        run: docker images
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          registry: docker.io
          username:  ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Build and push Backend Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: gopiagasthia/qbbackend:1

  build_frontend:
    name: build_frontend
    runs-on: ubuntu-latest
    needs: [build_backend]
    # if: needs.paths-filter.outputs.output1 != 'true'
    steps:
      - name: Check out the repo
        uses: actions/checkout@v3
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 'v20.11.0'

      - name: build angular image
        run: |
          cd questionBank-frontend/web
          docker build -t angular-app .
      - name: display spring-app image
        run: docker images
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          registry: docker.io
          username:  ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          context: ./questionBank-frontend
          file: ./web/Dockerfile
          push: true
          tags: gopiagasthia/qbfrontend:1
  deploy:
    runs-on: self-hosted
    needs: [build_frontend]
    steps:
      - uses: actions/checkout@v4
      - name: Login to  Docker hub
        uses: docker/login-action@v3
        with:
          registry: docker.io
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: check images
        run: docker images
      - name: build elastic search image
        run: docker pull docker.elastic.co/elasticsearch/elasticsearch:8.8.1
      - name: build springboot image
        run: docker pull gopiagasthia/qbbackend:1
      - name: build angular image
        run: docker pull gopiagasthia/qbfrontend:1
      - name: docker compose
        run: docker-compose -f ./MyApp/docker-compose.yaml up -d